from django.shortcuts import redirect, render
import requests
from .models import MalwareAnalysis
from .forms import UploadedFileForm
from decouple import config
from datetime import datetime
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import login
from django.contrib.auth import logout
from django.contrib.auth.decorators import login_required



#Display the landing page

def index(request):
    return render(request, 'core/index.html')

def signup(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # Automatically log in the user after signup
            return redirect('index')  # Redirect to a success page or index
    else:
        form = UserCreationForm()
    return render(request, 'core/signup.html', {'form': form})

def live(request):
    return render(request, 'core/live_malware.html')



@login_required
def malware_list(request):
    if request.user.is_authenticated:
        # Filter analyses based on the logged-in user
        analyses = MalwareAnalysis.objects.filter(user=request.user)
    else:
        # Show no results for unauthenticated users
        analyses = MalwareAnalysis.objects.none()
    
    return render(request, 'core/malware_list.html', {'analyses': analyses})

def chatbot(request):
     return render(request, 'core/chatbot.html')
    

def logout_view(request):
    logout(request)
    return redirect('login')

def news_list(request):
    api_key = config('NEWS_API_KEY')
    query = 'malware OR cybersecurity'
    url = f'https://newsapi.org/v2/everything?q={query}&apiKey={api_key}'
    response = requests.get(url)
    data = response.json()
    
    articles = data.get('articles', [])

    # Convert publishedAt to datetime objects and sort articles by date (latest first)
    for article in articles:
        published_at = article.get('publishedAt')
        if published_at:
            article['publishedAt'] = datetime.strptime(published_at, "%Y-%m-%dT%H:%M:%SZ")
            article['formatted_date'] = article['publishedAt'].strftime("%B %d, %Y %H:%M:%S")
        else:
            article['publishedAt'] = None
            article['formatted_date'] = "Unknown Date"
            
        # for user in User.objects.all():
        #     Notification.objects.create(
        #         user=user,
        #         message=f"New article published: {article.title}"
        # )

    # Sort articles by 'publishedAt' (latest first)
    articles = sorted(articles, key=lambda x: x['publishedAt'], reverse=True)

    return render(request, 'core/news_list.html', {'articles': articles})

def upload_file(request):
    if request.method == 'POST':
        form = UploadedFileForm(request.POST, request.FILES)
        if form.is_valid():
            uploaded_file = form.save()  # Save the uploaded file first
            
            # Analyze the file and get the analysis ID
            file_id = analyze_file(uploaded_file.file.path, uploaded_file)
            
            if file_id:
                return redirect('file_analysis', file_id=file_id)
    else:
        form = UploadedFileForm()
    return render(request, 'core/upload_file.html', {'form': form})


def analyze_file(file_path, uploaded_file):
    api_key = config('VIRUSTOTAL_API_KEY')
    url = "https://www.virustotal.com/api/v3/files"
    headers = {'x-apikey': api_key}
    with open(file_path, 'rb') as file:
        response = requests.post(url, headers=headers, files={'file': file})

    if response.status_code == 200:
        result = response.json()
        file_id = result.get('data', {}).get('id')

        # Create a new MalwareAnalysis entry
        MalwareAnalysis.objects.create(
            file=uploaded_file,
            analysis_id=file_id,
            status='queued',  # Initial status
            results={},
        )
        return file_id
    else:
        return None

@login_required
def file_analysis(request, file_id):
    api_key = config('VIRUSTOTAL_API_KEY')
    url = f'https://www.virustotal.com/api/v3/analyses/{file_id}'
    headers = {'x-apikey': api_key}
    response = requests.get(url, headers=headers)
    
    if response.status_code == 200:
        data = response.json()

        # Extract attributes from the response data
        status = data.get('data', {}).get('attributes', {}).get('status', 'unknown')
        submission_date_str = data.get('data', {}).get('attributes', {}).get('submission_date', None)
        scan_date_str = data.get('data', {}).get('attributes', {}).get('scan_date', None)
        results = data.get('data', {}).get('attributes', {}).get('results', {})

        # Convert submission_date and scan_date to datetime
        if submission_date_str:
            try:
                submission_date = datetime.strptime(submission_date_str, "%Y-%m-%dT%H:%M:%SZ")
            except ValueError:
                submission_date = datetime.now()  # Fallback if date format is incorrect
        else:
            submission_date = datetime.now()  # Fallback to current date and time
        
        if scan_date_str:
            try:
                scan_date = datetime.strptime(scan_date_str, "%Y-%m-%dT%H:%M:%SZ")
            except ValueError:
                scan_date = datetime.now()  # Fallback if date format is incorrect
        else:
            scan_date = datetime.now()  # Fallback to current date and time
        
        # Update or create the MalwareAnalysis entry with results
        analysis, created = MalwareAnalysis.objects.update_or_create(
            analysis_id=file_id,
            defaults={
                'status': status,
                'submission_date': submission_date,
                'scan_date': scan_date,
                'results': results,
                'user': request.user  # Associate with the logged-in user
            }
        )

        return render(request, 'core/file_analysis.html', {
            'data': analysis,
            'file_id': file_id  # Pass the file_id to the template
        })
    else:
        return render(request, 'core/file_analysis.html', {
            'error': 'Analysis not found or error retrieving data',
            'file_id': file_id
        })


